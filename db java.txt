package dev.pakistan.calculator;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;

import org.w3c.dom.DOMException;
import org.w3c.dom.Document;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.Text;
import org.w3c.dom.UserDataHandler;

import java.util.ArrayList;

/**
 * Created by saamm on 1/26/2018.
 */
public class DB_Controller extends SQLiteOpenHelper {
    public DB_Controller(Context context, String name, SQLiteDatabase.CursorFactory factory, int version) {
        super(context, "test.db", null, 1);
    }

    @Override
    public void onCreate(SQLiteDatabase sqLiteDatabase){
        sqLiteDatabase.execSQL("CREATE CALCULATOR RECORD");
        String query = "CREATE TABLE IF NOT EXISTS RECORD (ID INTEGER PRIMARY KEY AUTOINCREMENT , OPERAND1 FLOAT, OPERATOR TEXT, OPERAND2 FLOAT, RESULT TEXT);";

        sqLiteDatabase .execSQL(query);

    }

    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {

    }
    public void insert(Float first, String operation, Float second, Float result)
    {
        ContentValues   ContentValues = new ContentValues();
        ContentValues.put("OPERAND1",first);
        ContentValues .put("OPERATOR",operation);
        ContentValues .put("OPERAND2",second);
        ContentValues .put("Result",result);
        this.getWritableDatabase().insertOrThrow("test","", ContentValues);
    }
    public ArrayList<Text>read()
    {
        ArrayList<Text> localList= new ArrayList<>();
        Cursor cursor = this.getReadableDatabase().rawQuery("SELECT * FROM RECORD",null);
        cursor.moveToFirst();

        if(cursor !=null)
            if (cursor.getCount() > 0) {
                int counter = cursor.getCount();
                int i = 0;
                while (i < counter) {
                    Text _refRecord = new Text() {
                        @Override
                        public Text splitText(int offset) throws DOMException {
                            return null;
                        }

                        @Override
                        public boolean isElementContentWhitespace() {
                            return false;
                        }

                        @Override
                        public String getWholeText() {
                            return null;
                        }

                        @Override
                        public Text replaceWholeText(String content) throws DOMException {
                            return null;
                        }

                        @Override
                        public String getData() throws DOMException {
                            return null;
                        }

                        @Override
                        public void setData(String data) throws DOMException {

                        }

                        @Override
                        public int getLength() {
                            return 0;
                        }

                        @Override
                        public String substringData(int offset, int count) throws DOMException {
                            return null;
                        }

                        @Override
                        public void appendData(String arg) throws DOMException {

                        }

                        @Override
                        public void insertData(int offset, String arg) throws DOMException {

                        }

                        @Override
                        public void deleteData(int offset, int count) throws DOMException {

                        }

                        @Override
                        public void replaceData(int offset, int count, String arg) throws DOMException {

                        }

                        @Override
                        public String getNodeName() {
                            return null;
                        }

                        @Override
                        public String getNodeValue() throws DOMException {
                            return null;
                        }

                        @Override
                        public void setNodeValue(String nodeValue) throws DOMException {

                        }

                        @Override
                        public short getNodeType() {
                            return 0;
                        }

                        @Override
                        public Node getParentNode() {
                            return null;
                        }

                        @Override
                        public NodeList getChildNodes() {
                            return null;
                        }

                        @Override
                        public Node getFirstChild() {
                            return null;
                        }

                        @Override
                        public Node getLastChild() {
                            return null;
                        }

                        @Override
                        public Node getPreviousSibling() {
                            return null;
                        }

                        @Override
                        public Node getNextSibling() {
                            return null;
                        }

                        @Override
                        public NamedNodeMap getAttributes() {
                            return null;
                        }

                        @Override
                        public Document getOwnerDocument() {
                            return null;
                        }

                        @Override
                        public Node insertBefore(Node newChild, Node refChild) throws DOMException {
                            return null;
                        }

                        @Override
                        public Node replaceChild(Node newChild, Node oldChild) throws DOMException {
                            return null;
                        }

                        @Override
                        public Node removeChild(Node oldChild) throws DOMException {
                            return null;
                        }

                        @Override
                        public Node appendChild(Node newChild) throws DOMException {
                            return null;
                        }

                        @Override
                        public boolean hasChildNodes() {
                            return false;
                        }

                        @Override
                        public Node cloneNode(boolean deep) {
                            return null;
                        }

                        @Override
                        public void normalize() {

                        }

                        @Override
                        public boolean isSupported(String feature, String version) {
                            return false;
                        }

                        @Override
                        public String getNamespaceURI() {
                            return null;
                        }

                        @Override
                        public String getPrefix() {
                            return null;
                        }

                        @Override
                        public void setPrefix(String prefix) throws DOMException {

                        }

                        @Override
                        public String getLocalName() {
                            return null;
                        }

                        @Override
                        public boolean hasAttributes() {
                            return false;
                        }

                        @Override
                        public String getBaseURI() {
                            return null;
                        }

                        @Override
                        public short compareDocumentPosition(Node other) throws DOMException {
                            return 0;
                        }

                        @Override
                        public String getTextContent() throws DOMException {
                            return null;
                        }

                        @Override
                        public void setTextContent(String textContent) throws DOMException {

                        }

                        @Override
                        public boolean isSameNode(Node other) {
                            return false;
                        }

                        @Override
                        public String lookupPrefix(String namespaceURI) {
                            return null;
                        }

                        @Override
                        public boolean isDefaultNamespace(String namespaceURI) {
                            return false;
                        }

                        @Override
                        public String lookupNamespaceURI(String prefix) {
                            return null;
                        }

                        @Override
                        public boolean isEqualNode(Node arg) {
                            return false;
                        }

                        @Override
                        public Object getFeature(String feature, String version) {
                            return null;
                        }

                        @Override
                        public Object setUserData(String key, Object data, UserDataHandler handler) {
                            return null;
                        }

                        @Override
                        public Object getUserData(String key) {
                            return null;
                        }
                    };

                    int operand1Index = cursor.getColumnIndex("OPERAND1");
                    int operand2Index = cursor.getColumnIndex("OPERAND2");
                    int resultIndex = cursor.getColumnIndex("RESULT");
                    int operatorIndex = cursor.getColumnIndex("OPERATOR");

                    _refRecord.setOperation(cursor.getString(operatorIndex));
                    _refRecord.setResult(cursor.getString(resultIndex));
                    _refRecord.setOprnd1(cursor.getString(operand1Index));
                    _refRecord.setOprnd2(cursor.getString(operand2Index));

                    localList.add(_refRecord);

                    i++;
                    cursor.moveToNext();
                }

            }

        return localList;
    }

    public  void delete() {
        this.getWritableDatabase().delete("RECORD", null, null);
    }

    }
}
